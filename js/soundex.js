(function() {

	var root = this,
		previous_soundex = root.soundex;


	var soundex = function() {
		var conversionMap = {

			'hi_IN': ['ँ', 'ं', 'ः', 'ऄ', 'अ', 'आ', 'इ', 'ई', 'उ', 'ऊ', 'ऋ', 'ऌ', 'ऍ', 'ऎ', 'ए', 'ऐ', 'ऑ', 'ऒ', 'ओ', 'औ', 'क', 'ख', 'ग', 'घ', 'ङ', 'च', 'छ', 'ज', 'झ', 'ञ', 'ट', 'ठ', 'ड', 'ढ', 'ण', 'त', 'थ', 'द', 'ध', 'न', 'ऩ', 'प', 'फ', 'ब', 'भ', 'म', 'य', 'र', 'ऱ', 'ल', 'ळ', 'ऴ', 'व', 'श', 'ष', 'स', 'ह', 'ऺ', 'ऻ', '़', 'ऽ', 'ा', 'ि', 'ी', 'ु', 'ू', 'ृ', 'ॄ', 'ॅ', 'ॆ', 'े', 'ै', 'ॉ', 'ॊ', 'ो', 'ौ', '्', 'ॎ', 'ॏ', 'ॐ', '॑', '॒', '॓', '॔', 'ॕ', 'ॖ', 'ॗ', 'क़', 'ख़', 'ग़', 'ज़', 'ड़', 'ढ़', 'फ़', 'य़', 'ॠ', 'ॡ', 'ॢ', 'ॣ', '।', '॥', '०', '१', '२', '३', '४', '५', '६', '७', '८', '९', '॰', 'ॱ', 'ॲ', 'ॳ', 'ॴ', 'ॵ', 'ॶ', 'ॷ', 'ॸ', 'ॹ', 'ॺ', 'ॻ', 'ॼ', 'ॽ', 'ॾ', 'ॿ'],
			'bn_IN': ['ঁ', 'ং', 'ঃ', '঄', 'অ', 'আ', 'ই', 'ঈ', 'উ', 'ঊ', 'ঋ', 'ঌ', '঍', '঎', 'এ', 'ঐ', '঑', '঒', 'ও', 'ঔ', 'ক', 'খ', 'গ', 'ঘ', 'ঙ', 'চ', 'ছ', 'জ', 'ঝ', 'ঞ', 'ট', 'ঠ', 'ড', 'ঢ', 'ণ', 'ত', 'থ', 'দ', 'ধ', 'ন', '঩', 'প', 'ফ', 'ব', 'ভ', 'ম', 'য', 'র', '঱', 'ল', '঳', '঴', '঵', 'শ', 'ষ', 'স', 'হ', '঺', '঻', '়', 'ঽ', 'া', 'ি', 'ী', 'ু', 'ূ', 'ৃ', 'ৄ', '৅', '৆', 'ে', 'ৈ', '৉', '৊', 'ো', 'ৌ', '্', 'ৎ', '৏', '৐', '৑', '৒', '৓', '৔', '৕', '৖', 'ৗ', '৘', '৙', '৚', '৛', 'ড়', 'ঢ়', '৞', 'য়', 'ৠ', 'ৡ', 'ৢ', 'ৣ', '৤', '৥', '০', '১', '২', '৩', '৪', '৫', '৬', '৭', '৮', '৯', 'ৰ', 'ৱ', '৲', '৳', '৴', '৵', '৶', '৷', '৸', '৹', '৺', '৻', 'ৼ', '৽', '৾', '৿'],
			'pa_IN': ['ਁ', 'ਂ', 'ਃ', '਄', 'ਅ', 'ਆ', 'ਇ', 'ਈ', 'ਉ', 'ਊ', '਋', '਌', '਍', '਎', 'ਏ', 'ਐ', '਑', '਒', 'ਓ', 'ਔ', 'ਕ', 'ਖ', 'ਗ', 'ਘ', 'ਙ', 'ਚ', 'ਛ', 'ਜ', 'ਝ', 'ਞ', 'ਟ', 'ਠ', 'ਡ', 'ਢ', 'ਣ', 'ਤ', 'ਥ', 'ਦ', 'ਧ', 'ਨ', '਩', 'ਪ', 'ਫ', 'ਬ', 'ਭ', 'ਮ', 'ਯ', 'ਰ', '਱', 'ਲ', 'ਲ਼', '਴', 'ਵ', 'ਸ਼', '਷', 'ਸ', 'ਹ', '਺', '਻', '਼', '਽', 'ਾ', 'ਿ', 'ੀ', 'ੁ', 'ੂ', '੃', '੄', '੅', '੆', 'ੇ', 'ੈ', '੉', '੊', 'ੋ', 'ੌ', '੍', '੎', '੏', '੐', 'ੑ', '੒', '੓', '੔', '੕', '੖', '੗', '੘', 'ਖ਼', 'ਗ਼', 'ਜ਼', 'ੜ', '੝', 'ਫ਼', '੟', '੠', '੡', '੢', '੣', '੤', '੥', '੦', '੧', '੨', '੩', '੪', '੫', '੬', '੭', '੮', '੯', 'ੰ', 'ੱ', 'ੲ', 'ੳ', 'ੴ', 'ੵ', '੶', '੷', '੸', '੹', '੺', '੻', '੼', '੽', '੾', '੿'],
			'gu_IN': ['ઁ', 'ં', 'ઃ', '઄', 'અ', 'આ', 'ઇ', 'ઈ', 'ઉ', 'ઊ', 'ઋ', 'ઌ', 'ઍ', '઎', 'એ', 'ઐ', 'ઑ', '઒', 'ઓ', 'ઔ', 'ક', 'ખ', 'ગ', 'ઘ', 'ઙ', 'ચ', 'છ', 'જ', 'ઝ', 'ઞ', 'ટ', 'ઠ', 'ડ', 'ઢ', 'ણ', 'ત', 'થ', 'દ', 'ધ', 'ન', '઩', 'પ', 'ફ', 'બ', 'ભ', 'મ', 'ય', 'ર', '઱', 'લ', 'ળ', '઴', 'વ', 'શ', 'ષ', 'સ', 'હ', '઺', '઻', '઼', 'ઽ', 'ા', 'િ', 'ી', 'ુ', 'ૂ', 'ૃ', 'ૄ', 'ૅ', '૆', 'ે', 'ૈ', 'ૉ', '૊', 'ો', 'ૌ', '્', '૎', '૏', 'ૐ', '૑', '૒', '૓', '૔', '૕', '૖', '૗', '૘', '૙', '૚', '૛', '૜', '૝', '૞', '૟', 'ૠ', 'ૡ', 'ૢ', 'ૣ', '૤', '૥', '૦', '૧', '૨', '૩', '૪', '૫', '૬', '૭', '૮', '૯', '૰', '૱', '૲', '૳', '૴', '૵', '૶', '૷', '૸', 'ૹ', 'ૺ', 'ૻ', 'ૼ', '૽', '૾', '૿'],
			'or_IN': ['ଁ', 'ଂ', 'ଃ', '଄', 'ଅ', 'ଆ', 'ଇ', 'ଈ', 'ଉ', 'ଊ', 'ଋ', 'ଌ', '଍', '଎', 'ଏ', 'ଐ', '଑', '଒', 'ଓ', 'ଔ', 'କ', 'ଖ', 'ଗ', 'ଘ', 'ଙ', 'ଚ', 'ଛ', 'ଜ', 'ଝ', 'ଞ', 'ଟ', 'ଠ', 'ଡ', 'ଢ', 'ଣ', 'ତ', 'ଥ', 'ଦ', 'ଧ', 'ନ', '଩', 'ପ', 'ଫ', 'ବ', 'ଭ', 'ମ', 'ଯ', 'ର', '଱', 'ଲ', 'ଳ', '଴', 'ଵ', 'ଶ', 'ଷ', 'ସ', 'ହ', '଺', '଻', '଼', 'ଽ', 'ା', 'ି', 'ୀ', 'ୁ', 'ୂ', 'ୃ', 'ୄ', '୅', '୆', 'େ', 'ୈ', '୉', '୊', 'ୋ', 'ୌ', '୍', '୎', '୏', '୐', '୑', '୒', '୓', '୔', '୕', 'ୖ', 'ୗ', '୘', '୙', '୚', '୛', 'ଡ଼', 'ଢ଼', '୞', 'ୟ', 'ୠ', 'ୡ', 'ୢ', 'ୣ', '୤', '୥', '୦', '୧', '୨', '୩', '୪', '୫', '୬', '୭', '୮', '୯', '୰', 'ୱ', '୲', '୳', '୴', '୵', '୶', '୷', '୸', '୹', '୺', '୻', '୼', '୽', '୾', '୿'],
			'ta_IN': ['஁', 'ஂ', 'ஃ', '஄', 'அ', 'ஆ', 'இ', 'ஈ', 'உ', 'ஊ', '஋', '஌', '஍', 'எ', 'ஏ', 'ஐ', '஑', 'ஒ', 'ஓ', 'ஔ', 'க', '஖', '஗', '஘', 'ங', 'ச', '஛', 'ஜ', '஝', 'ஞ', 'ட', '஠', '஡', '஢', 'ண', 'த', '஥', '஦', '஧', 'ந', 'ன', 'ப', '஫', '஬', '஭', 'ம', 'ய', 'ர', 'ற', 'ல', 'ள', 'ழ', 'வ', 'ஶ', 'ஷ', 'ஸ', 'ஹ', '஺', '஻', '஼', '஽', 'ா', 'ி', 'ீ', 'ு', 'ூ', '௃', '௄', '௅', 'ெ', 'ே', 'ை', '௉', 'ொ', 'ோ', 'ௌ', '்', '௎', '௏', 'ௐ', '௑', '௒', '௓', '௔', '௕', '௖', 'ௗ', '௘', '௙', '௚', '௛', '௜', '௝', '௞', '௟', '௠', '௡', '௢', '௣', '௤', '௥', '௦', '௧', '௨', '௩', '௪', '௫', '௬', '௭', '௮', '௯', '௰', '௱', '௲', '௳', '௴', '௵', '௶', '௷', '௸', '௹', '௺', '௻', '௼', '௽', '௾', '௿'],
			'te_IN': ['ఁ', 'ం', 'ః', 'ఄ', 'అ', 'ఆ', 'ఇ', 'ఈ', 'ఉ', 'ఊ', 'ఋ', 'ఌ', '఍', 'ఎ', 'ఏ', 'ఐ', '఑', 'ఒ', 'ఓ', 'ఔ', 'క', 'ఖ', 'గ', 'ఘ', 'ఙ', 'చ', 'ఛ', 'జ', 'ఝ', 'ఞ', 'ట', 'ఠ', 'డ', 'ఢ', 'ణ', 'త', 'థ', 'ద', 'ధ', 'న', '఩', 'ప', 'ఫ', 'బ', 'భ', 'మ', 'య', 'ర', 'ఱ', 'ల', 'ళ', 'ఴ', 'వ', 'శ', 'ష', 'స', 'హ', '఺', '఻', '఼', 'ఽ', 'ా', 'ి', 'ీ', 'ు', 'ూ', 'ృ', 'ౄ', '౅', 'ె', 'ే', 'ై', '౉', 'ొ', 'ో', 'ౌ', '్', '౎', '౏', '౐', '౑', '౒', '౓', '౔', 'ౕ', 'ౖ', '౗', 'ౘ', 'ౙ', 'ౚ', '౛', '౜', 'ౝ', '౞', '౟', 'ౠ', 'ౡ', 'ౢ', 'ౣ', '౤', '౥', '౦', '౧', '౨', '౩', '౪', '౫', '౬', '౭', '౮', '౯', '౰', '౱', '౲', '౳', '౴', '౵', '౶', '౷', '౸', '౹', '౺', '౻', '౼', '౽', '౾', '౿'],
			'kn_IN': ['ಁ', 'ಂ', 'ಃ', '಄', 'ಅ', 'ಆ', 'ಇ', 'ಈ', 'ಉ', 'ಊ', 'ಋ', 'ಌ', '಍', 'ಎ', 'ಏ', 'ಐ', '಑', 'ಒ', 'ಓ', 'ಔ', 'ಕ', 'ಖ', 'ಗ', 'ಘ', 'ಙ', 'ಚ', 'ಛ', 'ಜ', 'ಝ', 'ಞ', 'ಟ', 'ಠ', 'ಡ', 'ಢ', 'ಣ', 'ತ', 'ಥ', 'ದ', 'ಧ', 'ನ', '಩', 'ಪ', 'ಫ', 'ಬ', 'ಭ', 'ಮ', 'ಯ', 'ರ', 'ಱ', 'ಲ', 'ಳ', '಴', 'ವ', 'ಶ', 'ಷ', 'ಸ', 'ಹ', '಺', '಻', '಼', 'ಽ', 'ಾ', 'ಿ', 'ೀ', 'ು', 'ೂ', 'ೃ', 'ೄ', '೅', 'ೆ', 'ೇ', 'ೈ', '೉', 'ೊ', 'ೋ', 'ೌ', '್', '೎', '೏', '೐', '೑', '೒', '೓', '೔', 'ೕ', 'ೖ', '೗', '೘', '೙', '೚', '೛', '೜', 'ೝ', 'ೞ', '೟', 'ೠ', 'ೡ', 'ೢ', 'ೣ', '೤', '೥', '೦', '೧', '೨', '೩', '೪', '೫', '೬', '೭', '೮', '೯', '೰', 'ೱ', 'ೲ', 'ೳ', '೴', '೵', '೶', '೷', '೸', '೹', '೺', '೻', '೼', '೽', '೾', '೿'],
			'ml_IN': ['ഁ', 'ം', 'ഃ', 'ഄ', 'അ', 'ആ', 'ഇ', 'ഈ', 'ഉ', 'ഊ', 'ഋ', 'ഌ', '഍', 'എ', 'ഏ', 'ഐ', '഑', 'ഒ', 'ഓ', 'ഔ', 'ക', 'ഖ', 'ഗ', 'ഘ', 'ങ', 'ച', 'ഛ', 'ജ', 'ഝ', 'ഞ', 'ട', 'ഠ', 'ഡ', 'ഢ', 'ണ', 'ത', 'ഥ', 'ദ', 'ധ', 'ന', 'ഩ', 'പ', 'ഫ', 'ബ', 'ഭ', 'മ', 'യ', 'ര', 'റ', 'ല', 'ള', 'ഴ', 'വ', 'ശ', 'ഷ', 'സ', 'ഹ', 'ഺ', '഻', '഼', 'ഽ', 'ാ', 'ി', 'ീ', 'ു', 'ൂ', 'ൃ', 'ൄ', '൅', 'െ', 'േ', 'ൈ', '൉', 'ൊ', 'ോ', 'ൌ', '്', 'ൎ', '൏', '൐', '൑', '൒', '൓', 'ൔ', 'ൕ', 'ൖ', 'ൗ', '൘', '൙', '൚', '൛', '൜', '൝', '൞', 'ൟ', 'ൠ', 'ൡ', 'ൢ', 'ൣ', '൤', '൥', '൦', '൧', '൨', '൩', '൪', '൫', '൬', '൭', '൮', '൯', '൰', '൱', '൲', '൳', '൴', '൵', '൶', '൷', '൸', '൹', 'ൺ', 'ൻ', 'ർ', 'ൽ', 'ൾ', 'ൿ'],
			'en_US': ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],
			'soundex_en': ['0', '1', '2', '3', '0', '1', '2', '0', '0', '2', '2', '4', '5', '5', '0', '1', '2', '6', '2', '3', '0', '1', '0', '2', '0', '2'],
			'soundex': ['0', 'N', '0', '0', 'A', 'A', 'B', 'B', 'C', 'C', 'P', 'Q', '0', 'D', 'D', 'D', 'E', 'E', 'E', 'E', 'F', 'F', 'F', 'F', 'G', 'H', 'H', 'H', 'H', 'G', 'I', 'I', 'I', 'I', 'J', 'K', 'K', 'K', 'K', 'L', 'L', 'M', 'M', 'M', 'M', 'N', 'O', 'P', 'P', 'Q', 'Q', 'Q', 'R', 'S', 'S', 'S', 'T', '0', '0', '0', '0', 'A', 'B', 'B', 'C', 'C', 'P', 'P', 'E', 'D', 'D', 'D', 'D', 'E', 'E', 'E', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', 'E', '0', '0', '0', '0', '0', '0', '0', '0', 'P', 'Q', 'Q', 'Q', '0', '0', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', 'J', 'J', 'Q', 'P', 'P', 'F'],
		};

		/**
		 * Return the soundex code for given character
		 * @param  {[type]} char Character for which soundex whose soundex code should be
		 *                 calculated
		 * @return {[type]} oundex code for given character or 0 on exceptions and
		 *             if given character is not valid
		 */
		function soundex_char(char) {
			var characters;

			for (var lang in conversionMap) {
				characters = conversionMap[lang];
				if (characters.indexOf(char) >= 0) {
					if (lang === 'en_US') {
						return conversionMap.soundex_en[characters.indexOf(char)];
					}
					return conversionMap.soundex[characters.indexOf(char)];
				}
			}
			return '0';
		}

		function getSoundex(word) {
			var result = '';
			for (var index in word) {
				if (index == 0) {
					result += word[index];
					continue;
				}
				soundexChar = soundex_char(word[index]);
				result += soundexChar === '0' ? '' : soundexChar;
			}
			for (var index = result.length; index < word.length; index++) {
				result += '0';
			}
			return result;
		}

		/*
		 * Compare soundex of given strings
		 * @return {integer} 0 if both strings are same 1 if soundex of both strings are same
		 */
		function compareSoundex(string1, string2) {
			if (string1 == string2) { // Exact Match
				return 0;
			}
			var soundex1 = getSoundex(string1)
			var soundex2 = getSoundex(string2)
			if (soundex1 == soundex2) { // Both sounds alike
				return 1;
			}
			return -1; //Strings doesnot match
		}

		return {
			get: getSoundex,
			compare: compareSoundex
		};
	};

	if (typeof exports !== 'undefined') { // nodejs
		soundex.platform = {
			name: 'node.js',
			version: process.version
		};
		soundex.version = JSON.parse(
			require('fs').readFileSync(__dirname + '/package.json')).version;
		soundex.path = __dirname;
		if (typeof module !== 'undefined' && module.exports) {
			exports = module.exports = soundex;
		}
		exports.soundex = soundex;
	} else { // browser
		// browser detection is possible in the future
		soundex.platform = {
			name: 'browser'
		};
		soundex.version = '0.0.3';
		if (typeof define === 'function' && define.amd) {
			define('soundex', function() {
				return soundex;
			});
		} else {
			root.soundex = soundex;
		}
	}
})();